#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["St3 Sp1"]
#Text["First spell!"]
#Player["./../../player/player0.dnh"]
#System["./../../system/system.dnh"]
#include "./../../prologue.dnh"
let id = 15;
let level = 5;
#include "./../spell_header.dnh"
#include "./render_boss.dnh"

@Event {
	alternative (GetEventType)
	case (EV_REQUEST_LIFE) {
		SetScriptResult(9000);
	}
	case (EV_REQUEST_TIMER) {
		SetScriptResult(72);
	}
	case (EV_REQUEST_SPELL_SCORE) {
		SetScriptResult(spellBonus);
	}
}

@Finalize {}

task TWork {
	let width = GetStgFrameWidth;
	let height = GetStgFrameHeight;
	let period = 45 / (1 + 0.33 * getDifficulty);
	let f2Chance = 0.1 * getDifficulty;
	//if (getDifficulty >= 4) {TWorkOD;}
	task familiar(shot) {
		let av = 0;
		let destOffset = rand(-10, 10);
		let suicideBulletCount = 9 + getDifficulty * 3;
		let ctr = 0;
		let m = 1;
		task changeMTo(newM, frame) {
			let amtPerFrame = (newM - m) / frame;
			loop (frame) {m += amtPerFrame;}
		}
		while (!Obj_IsDeleted(shot)) {
			let toPlayer = GetAngleToPlayer(shot) + destOffset;
			let ofShot = ObjMove_GetAngle(shot);
			let offset = (toPlayer - ofShot) % 360;
			if (offset < 180) {av = 0.1 * offset * m;}
			else {av = -0.1 * (360 - offset) * m;}
			ObjMove_SetAngularVelocity(shot, av);
			alternative (truncate(rand(0, 720)))
			case (0) {
				changeMTo(-m, 30);
			}
			case (1) {
				changeMTo(1, 30);
			}
			case (2) {
				changeMTo(-1, 30);
			}
			case (3) {
				changeMTo(0, 30);
			}
			case (4) {
				changeMTo(0.5, 30);
			}
			case (5) {
				changeMTo(-0.5, 30);
			}
			ctr++;
			if (GetObjectDistance(shot, GetPlayerObjectID) <= 35 || ctr >= 600) {
				let sign = randomSign;
				ascent (i in 0 .. suicideBulletCount) {
					let s = CreateShotOA1(shot, 1, 360 * i / suicideBulletCount, DS_BALL_SS_GREEN, 0);
					ObjMove_SetAngularVelocity(s, sign * 0.5);
					ObjMove_AddPatternA2(s, 60, NO_CHANGE, NO_CHANGE, 0, 0, 1);
				}
				Obj_Delete(shot);
				return;
			}
			yield;
		}
	}
	task familiar2(shot) {
		while (!Obj_IsDeleted(shot)) {
			let a = GetAngleToPlayer(shot);
			// 3 Way Shot
			ascent (i in -1 .. 2) {
				CreateShotOA1(shot, 2.5, a + 20 * i, DS_BALL_S_A_RED, 5);
			}
			wait(60);
		}
	}
	while (ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
		let shot = CreateShotA1(rand(0, width), 0, 1.5, rand(70, 110), DS_RICE_M_ORANGE, 30);
		familiar(shot);
		if (rand(0, 1) < f2Chance) {familiar2(shot);}
		if (getDistanceToPlayer(objBoss) < 100) {
			let a = GetAngleToPlayer(objBoss);
			ascent (i in -5 .. 6) {
				CreateShotOA1(objBoss, 4, a + 10 * i, DS_RICE_M_GREEN, 0);
			}
		}
		wait(period);
	}
}

task TWorkOD {
	while (ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
		let a = GetAngleToPlayer(objBoss);
		ascent (i in 0 .. 20) {
			CreateShotOA1(objBoss, 1 + 0.1 * i, a, DS_LIGHT_YELLOW, 0);
		}
		wait(80);
	}
}
