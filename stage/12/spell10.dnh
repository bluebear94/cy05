#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["St1 Sp3"]
#Text["Third spell!"]
#Player["./../../player/player0.dnh"]
#System["./../../system/system.dnh"]
#include "./../../prologue.dnh"
#include "./../../player/shotc.dnh"
let id = 75;
let level = 12;
#include "./../spell_header.dnh"
#include "./render_boss.dnh"
#include "./bossfunc.dnh"

let height = GetStgFrameHeight;
let width = GetStgFrameWidth;

@Event {
	alternative (GetEventType)
	case (EV_REQUEST_LIFE) {
		SetScriptResult(30000);
	}
	case (EV_REQUEST_TIMER) {
		SetScriptResult(200);
	}
	case (EV_REQUEST_SPELL_SCORE) {
		SetScriptResult(spellBonus);
	}
}

@Finalize {}

function hp {return min(ObjEnemy_GetInfo(objBoss, INFO_LIFE), ObjEnemyBossScene_GetInfo(GetEnemyBossSceneObjectID, INFO_TIMERF) * 2.5);}

task TWork {
	let height = GetStgFrameHeight;
	let width = GetStgFrameWidth;
	let cx = width / 2;
	let cy = height / 2;
	let d = getDifficulty - 5;
	part1;
	let period = 80 - 8 * d;
	let t = rand(0, 360);
	let cl = 0;
	while (!isDead) {
		let u = 0;
		loop (10) {
			let r = 70 * astroid(u, 6);
			loop (6) {
				CreateShotA1(ObjMove_GetX(objBoss) + r * cos(t), ObjMove_GetY(objBoss) + r * sin(t), r * 0.04, t, DS_BILL_RED + cl, 30);
				CreateShotA1(ObjMove_GetX(objBoss) + r * cos(t), ObjMove_GetY(objBoss) + r * sin(t), r * 0.04, 30 + t, DS_BILL_RED + cl, 30);
				t += 60;
			}
			t += 6;
			u += 6;
			cl = (cl + 1) % 8;
			shotSound;
		}
		t = rand(0, 360);
		wait(period);
	}
}

task plantTree(x) {
	let lifespan = 24 * getDifficulty + rand(0, 90) + rand(0, 90);
	task stem(x, y, t, a, gen) {
		ascent (i in 0 .. a) {
			if (isDead) {return;}
			ObjShot_SetDeleteFrame(CreateShotA1(x, y, 0, t, DS_ICE_GREEN, 30), lifespan);
			x += 10 * cos(t);
			y += 10 * sin(t);
			wait(3);
		}
		loop (randIntH(2, 5)) {
			if (rand(0, 1) < 1.3 * 0.6 ^ gen) {
				stem(x, y, t + rand(-30, 30), a * rand(0.7, 0.8), gen + 1);
			}
		}
	}
	stem(x, GetStgFrameHeight, rand(-85, -95), rand(12, 16), 0);
}

task part1 {
	while (hp > 25000) {yield;}
	let height = GetStgFrameHeight;
	let width = GetStgFrameWidth;
	let cx = width / 2;
	let cy = height / 2;
	let d = getDifficulty - 5;
	part2;
	while (!isDead) {
		plantTree(min(width, max(0, GetPlayerX + rand(-50, 50))));
		wait(540);
	}
}

task part2 {
	while (hp > 20000) {yield;}
	part3;
	let height = GetStgFrameHeight;
	let width = GetStgFrameWidth;
	let cx = width / 2;
	let cy = height / 2;
	let cl = 0;
	while (!isDead) {
		let a = rand(-120, -60);
		ascent (i in -1 .. 2) {
			CreateStraightLaserA1(cx, height, a + 45 * i, 600, 24, 120, DS_BEAM_RED + cl, 60);
		}
		cl = (cl + 1) % 8;
		wait(240);
	}
}

task part3 {
	while (hp > 15000) {yield;}
	let d = getDifficulty;
	part4;
	let height = GetStgFrameHeight;
	let width = GetStgFrameWidth;
	let cx = width / 2;
	let cy = height / 2;
	let t = rand(0, 360);
	let cl = false;
	while (!isDead) {
		loop (5) {
			loop (12) {
				CreateShotA1(GetPlayerX + cx * cos(t), GetPlayerY + cx * sin(t), 1, t, DS_BILL_YELLOW + cl, 60);
				CreateShotA1(GetPlayerX + cx * cos(t), GetPlayerY + cx * sin(t), 1, 180 + t, DS_BILL_GREEN - cl, 60);
				t += 2;
			}
			cl = !cl;
			t += 48;
		}
		t += rand(0, 18) + rand(0, 18);
		wait(300);
	}
}

let reverse = false;

task spiral(x, y) {
	let a = getAngleToXY(GetPlayerObjectID, x, y) + 180;
	let d = getDifficulty;
	let interval = 87 - 6.7 * d;
	let s = randomSign;
	let speed = 1.2 + 0.03 * d;
	let cl = randIntH(0, 8);
	while (!isDead) {
		CreateShotA1(x, y, speed, a, DS_SCALE_GREEN, 30);
		CreateShotA1(x, y, speed, 0.5 * a, DS_SCALE_GREEN, 30);
		if (reverse) {
			if (d >= 2) {CreateStraightLaserA1(x, y, getAngleToXY(GetPlayerObjectID, x, y) + 180, 600, 24, 30, DS_BEAM_GREEN, 90);}
			s = randomSign;
		}
		a += interval * s;
		wait(interval / 2);
	}
}

task spiral2(x, y) {
	spiral(x, y);
	spiral(GetStgFrameWidth - x, y);
}

task part4 {
	while (hp > 10000) {yield;}
	let height = GetStgFrameHeight;
	let width = GetStgFrameWidth;
	let cx = width / 2;
	let cy = height / 2;
	let d = getDifficulty;
	part5;
	let interval = 29 - 2.9 * d;
	spiral2(100, 50);
	spiral2(50, 150);
	spiral2(100, 200);
	spiral(cx, 250);
	spiral(cx, 75);
	while (!isDead) {
		reverse = true;
		wait(interval / 2);
		reverse = false;
		wait(240);
	}
}

task part5 {
	while (hp > 5000) {yield;}
	let d = getDifficulty - 5;
	let height = GetStgFrameHeight;
	let width = GetStgFrameWidth;
	let cx = width / 2;
	let cy = height / 2;
	let flip = false;
	let n = 4 + 2 * d;
	let period = 100 - 5 * d;
	let t = 0;
	while (!isDead) {
		let v = cy / n * rand(-1, 1);
		if (!flip || d) {
			ascent (i in 0 .. n + 1) {
				let shot = CreateShotA2(0, height * i / n + v, 1.5, 20 + 2 * sin(t) + rand(-2, 2), 0.01, 2.5, DS_KNIFE_KOUMA_ORANGE, 0);
				ObjMove_SetAngularVelocity(shot, 0.1);
				shot = CreateShotA2(0, height * i / n + v, 1.5, -20 - 2 * sin(t) + rand(-2, 2), 0.01, 2.5, DS_KNIFE_KOUMA_ORANGE, 0);
				ObjMove_SetAngularVelocity(shot, -0.1);
			}
		}
		if (flip || d) {
			ascent (i in 0 .. n + 1) {
				let shot = CreateShotA2(width, height * i / n + v, 1.5, 160 - 2 * sin(t) + rand(-2, 2), 0.01, 2.5, DS_KNIFE_KOUMA_YELLOW, 0);
				ObjMove_SetAngularVelocity(shot, -0.1);
				shot = CreateShotA2(width, height * i / n + v, 1.5, -160 + 2 * sin(t) + rand(-2, 2), 0.01, 2.5, DS_KNIFE_KOUMA_YELLOW, 0);
				ObjMove_SetAngularVelocity(shot, 0.1);
			}
		}
		shotSound;
		flip = !flip;
		wait(period);
		t += 23;
	}
}